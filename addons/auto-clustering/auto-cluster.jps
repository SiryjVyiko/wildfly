jpsType: update
jpsVersion: 1.4
name: WildFly Auto-Cluster
id: wildfly-cluster

globals:
  workerUser: worker
  workerPswd: ${fn.password}
  path: /opt/wildfly/ssl/admin

baseUrl: https://raw.githubusercontent.com/SiryjVyiko/wildfly/master/addons/auto-clustering

nodeGroupAlias:
  ${targetNodes.nodeGroup}: cp

onInstall:
  - if (nodes.ctrl):
    - if (settings.cloned != 'true'):
      - buildCluster
    - if (settings.cloned == 'true'):
      - setRedirectToController: ${nodes.cp.join(id,)}
      - updateLink2CtrlConsole: ${nodes.cp.join(id,)}
  - if (!nodes.ctrl):
    - buildCluster

onAfterRedeployContainer[cp]:
- cmd [cp]: sudo service wildfly restart
- updateLink2CtrlConsole: ${event.cp.join(id,)}
- setRedirectToController: ${nodes.cp.join(id,)}
- if (nodes.ctrl): setJavaMemoryOpts

onAfterServiceScaleOut[cp]:
- cmd [cp]: sudo service wildfly restart
- updateLink2CtrlConsole: ${event.response.nodes.join(id,)}
- setRedirectToController: ${event.response.nodes.join(id,)}
- setNodeDisplayName[cp]: Worker
- if (nodes.ctrl): setJavaMemoryOpts

onAfterServiceScaleOut[bl]:
- setNodeDisplayName[bl]: Balancer

onAfterAddNode[bl]:
- setNodeDisplayName[bl]: Balancer

onAfterSetCloudletCount[cp]:
  if (nodes.ctrl): setJavaMemoryOpts

onAfterResetNodePassword[cp]:
  if (nodes.ctrl): addAdminUser

onAfterResetServicePassword[cp]:
  if (nodes.ctrl): addAdminUser

onAfterRestartNode[cp]:
- setRedirectToController: ${nodes.cp.join(id,)}

addons:
  - id: wildfly-build-cluster-addon

    nodeGroupAlias:
      ${settings.nodeGroup}: cp

    onInstall:
    - setupCtrl
    - if (!(!'${:}' && '${fn.compareEngine(1.6):}' > 0)):
        - addAdminUser
    - setNodeDisplayName[cp]: Worker
    - migrateToDomain
    - setJavaMemoryOpts
    - if (jelastic.env.control.SetNodeGroupDisplayName):
        - api: env.control.SetNodeGroupDisplayName
          nodeGroup: ctrl
          displayName: Domain Controller
        - api: env.control.SetNodeGroupDisplayName
          nodeGroup: cp
          displayName: Workers
    - if (nodes.bl):
        - setNodeDisplayName[bl]: Balancer

actions:
  setJavaMemoryOpts:
    cmd[${nodes.cp.master.id}]: sudo domainMemoryConfig

  migrateToDomain:
    cmd[${nodes.cp.master.id}]: sudo restoreDatasources; sudo migrateDeployments;

  saveDatasources:
    cmd[${nodes.cp.master.id}]: sudo saveDatasources;

  mountSSLDirectory:
    api: env.file.AddMountPointByGroup
    nodeGroup: cp
    path: "${globals.path}"
    protocol: nfs
    sourcePath: "${globals.path}"
    sourceNodeId: "${nodes.ctrl.master.id}"
    name: Internal admin certificates

  buildCluster:
  - if (nodes.ctrl):
    - env.control.AddContainerEnvVars [${nodes.ctrl.master.id}]:
      vars: {"CTRL":"true", "WORKER_USER": "${globals.workerUser}", "WORKER_PASSWORD":"${globals.workerPswd}", "JBOSS_MODE":"domain", "JELASTIC_EXPOSE":"4949"}
    - cmd [ctrl]: service wildfly restart; service jelinit restart
      user: root
  - if (!nodes.ctrl):
      addNodes:
        fixedCloudlets: ${nodes.cp.master.fixedCloudlets}
        flexibleCloudlets: ${nodes.cp.master.flexibleCloudlets}
        displayName: Controller
        nodeType: ${nodes.cp.master.nodeType}
        tag: ${nodes.cp.master.version}
        nodeGroup: ctrl
        metadata:
          layer: ctrl
        dockerEnvVars:
          CTRL: 'true'
          WORKER_USER: ${globals.workerUser}
          WORKER_PASSWORD: ${globals.workerPswd}
          JBOSS_MODE: domain
          JELASTIC_EXPOSE: 4949
        nodeGroupData:
          validation:
            maxCount: 1
          isClusterSupport: false
          isDeploySupport: false

  - installAddon:
      id: wildfly-build-cluster-addon
      settings:
        migrate: ${this.migrate}
        nodeGroup: ${targetNodes.nodeGroup}

  setupCtrl:
  - mountSSLDirectory
  - addWokerUser:
    ctrlNodeId: ${nodes.ctrl.master.id}
  - linkLayers:
      ctrlNodeId: ${nodes.ctrl.master.id}
  - updateLink2CtrlConsole: ${nodes.cp.join(id,)}
  - cmd [cp]: sudo service wildfly restart
  - setRedirectToController: ${nodes.cp.join(id,)}

  addWokerUser:
    nodeGroup: ctrl
    cmd: $STACK_PATH/bin/add-user.sh $WORKER_USER $WORKER_PASSWORD 2>&1

  addAdminUser:
    script: ${baseUrl}/scripts/setAdminPassword.js?_r=${fn.random}

  linkLayers:
    forEach (wnode:nodes.cp):
      api: env.control.LinkDockerNodes
      sourceNodeId: ${nodes.ctrl.master.id}
      targetNodeId: ${@wnode.id}
      groupAlias: ctrl
      alias: ctrl

  updateLink2CtrlConsole:
    cmd[${this}]: sed -i "s#href=\"/console\"#href=\"http://node${nodes.ctrl.master.id}-${env.domain}/console\"#g" ${STACK_PATH}/welcome-content/index.html

  setRedirectToController:
    cmd[${this}]: sudo setAdminPanelRedirect

onAfterClone:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install[cp]: ${response.jps}
    envName: ${event.response.env.envName}
    settings:
      cloned: 'true'
